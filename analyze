#!/usr/bin/env perl6

my @selected-benchmarks = ("01-logmunge", "02-gauss-elimination", "03-backend");

my $fh = open("out", :w);

$fh.say("# timestamp                           version" 
    ~ @selected-benchmarks.map({sprintf("%15s", $_.substr(0, 14));}).join(""));
say("# timestamp                           version" 
    ~ @selected-benchmarks.map({sprintf("%15s", $_.substr(0, 14));}).join(""));

for dir(test => /'.log' $/).sort.reverse -> $file {
    my $state = 0;
    my $effective-date = Nil;
    my %bench-results = %();
    my $bench-name;
    my $version = $file;
    $version ~~ s:g/'-'/_/;
    $version ~~ s:g/'.log'$//;
    for $file.IO.lines -> $line {
        if $state == 0 && $line ~~ /^ 'commit '/ {
            $state = 1;
        }
        elsif $state == 1 && $line ~~ /^ 'Date:' \s+ (.*)/ {
            my $date-str = $0;
            # argh, git and perl seem to have different ideas about iso 8601...
            $date-str ~~ s/' '/T/;
            $date-str ~~ s/' '//;
            my $date = DateTime.new($date-str);
            if (! defined $effective-date) || ($date > $effective-date) {
                $effective-date = $date;
            }
        }
        elsif $state == 1 && $line ~~ /^ \s* $/ {
            $state = 0;
        }
        elsif $state == 0 && $line ~~ /^ '# running ' (.*) '...' / {
            $bench-name = $0;
            $state = 2;
        }
        elsif $state == 2 && $line ~~ /^ 'benchmark complete' / {
            $state = 3;
        }
        elsif $state == 3 && $line ~~ /^ 'real' \s+ (\d+) 'm' (<[\d]+[.]>+) / {
            %bench-results{$bench-name} = $0 * 60 + $1;
            $state = 0;
        }
    }
    my $result-line = sprintf("%11s", $effective-date.posix);
    $result-line ~= sprintf("%34s", $version);
    for @selected-benchmarks -> $bm {
        $result-line ~= sprintf("%15s", %bench-results{$bm}//"??");
    }
    $fh.say($result-line);
    say($result-line);
}
$fh.close;
shell("./plot.r");
unlink("out");

$fh = open("README.md", :w);
$fh.say(q:to/END/);
# Yet Another Perl 6 Benchmark

## Goals

This project is trying to write another benchmark for the Perl 6 runtime. I am massively impressed by the work at http://tux.nl/Talks/CSV6/speed4.html, but would also be interested how current runtime versions perform for other workloads.

The specific goals of this becnhmark are:

* Allow comparison of recent versions of the Perl 6 runtime
* Broken down into a few sub-benchmarks focusing on different aspects of the language
* Have non-trivial cases inspired by real-world loads, so less synthetic benchmarks
* Avoid non-core modules so that the benchmark compares runtime performance and not improvements in these modules

## Status and Todos

This is in a very early state, amongst other thigns it needs:

* Fixes to make the "backend" test reliable and meaningful
* Fixes to the setup to extend the range of tested versions further into the past
* More sub-benchmarks for other aspects of the language
* Reviews of the existing benchmarks to make them more idomatic (not to optimize them in terms of performance)

Please help!

## The Benchmarks

### 01-logmunge

This benchmark simulates logfile analysis, so primarily regular expression matching and other text processing.

### 02-gauss-elimination

This benchmark solves a large system of linear equation using exact maths, focusing on rational number performance.

### 03-backend 

This emulates a service-oriented backend by setting up multiple servers that communicate over a HTTP-like protocol. It involves concurrency, promises, network I/O and text processing. This benchmark is currently broken and very unreliable, any help welcome.

## Results

Below are the results, lower numbers are better of course.

![alt text](bench.svg)

The results for the currently broken backend benchmark:

![alt text](bench-broken.svg)

### Test System

These tests were run on a 8-core Xeon E3-1245v3 at 3.40GHz with 32GB of memory. 

END

$fh.close;
