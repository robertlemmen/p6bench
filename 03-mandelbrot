#!/usr/bin/env perl6

use v6;

constant $RESOLUTION = 160;
constant $MAX-ITERATION = 512;

my @raw;

my $py;
my $px;

loop ($py = 0; $py < 2 * $RESOLUTION; $py++) {
    my Num $y0 = (-1.0 + $py / $RESOLUTION).Num;
    loop ($px = 0; $px < 3.5 * $RESOLUTION; $px++) {
        my Num $x0 = (-2.5 + $px / $RESOLUTION).Num;
        my $x = $x0;
        my $y = $y0;
        my $it = 0;
        while $x*$x + $y*$y < 4 && $it < $MAX-ITERATION {
            my $t = $x*$x - $y*$y + $x0;
            $y = 2*$x*$y + $y0;
            $x = $t;
            $it++;
        }
        @raw[$py][$px] = $it;
    }
}

my @hist;
loop ($py = 0; $py < 2 * $RESOLUTION; $py++) {
    loop ($px = 0; $px < 3.5 * $RESOLUTION; $px++) {
        @hist[@raw[$py][$px]]++;
    }
}

my @lookup;
# XXX build a color lookup table
my $total-pixels = (2 * $RESOLUTION) * (3.5 * $RESOLUTION);
my $cc = 0;
my $sum = 0;
loop (my $i = 0; $i < $MAX-ITERATION; $i++) {
    $sum += @hist[$i] // 0;
    my $color-idx = $sum * 256 / $total-pixels;
    @lookup[$i] = round($color-idx);
}

# XXX only for debugging
#use Image::PNG::Portable;
#my $o = Image::PNG::Portable.new(width => (3.5 * $RESOLUTION).Int, height => (2 * $RESOLUTION).Int);
loop ($py = 0; $py < 2 * $RESOLUTION; $py++) {
    loop ($px = 0; $px < 3.5 * $RESOLUTION; $px++) {
        my $color = @lookup[@raw[$py][$px]] // 0;
#        $o.set($px, $py, $color, $color, $color);
    }
}
#$o.write("mb.png");

if @raw[$RESOLUTION / 2][$RESOLUTION / 2] != 0 || @raw[$RESOLUTION][$RESOLUTION] != 512 {
    say "check failed";
    exit(1);
}

say "benchmark complete";
