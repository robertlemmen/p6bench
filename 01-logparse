#!/usr/bin/env perl6

use v6;

constant NUM-LINES = 150000;

sub MAIN(Bool :$prep, Bool :$run, Bool :$cleanup) {
    say "Logparse benchmark";
    if $prep {
        say "Preparing...";
        srand(42);
        my $time = DateTime.new(1534447684).utc + Duration.new(0.002);
        my $fh = open("testfile", :w);
        my @open-tx;
        for ^NUM-LINES -> $i {
            given 7.rand.floor {
                when 1 { 
                    my $id = 5000000.rand.floor;
                    @open-tx.push($id);
                    my $otime = $time - Duration.new(1000.rand.round / 1000);
                    $fh.print("[$time] [INFO] starting tx $id for incoming request, rq timestamp is $otime\n") ;
                }
                when 2 {
                    if @open-tx.elems > 0 {
                        my $pos = @open-tx.elems.rand.floor;
                        my $id = @open-tx[$pos];
                        @open-tx.splice($pos, 1); 
                        $fh.print("[$time] [INFO] committing tx $id to DB\n")
                    }
                }
                when 3 {
                    if @open-tx.elems > 0 {
                        my $pos = @open-tx.elems.rand.floor;
                        my $id = @open-tx[$pos];
                        @open-tx.splice($pos, 1); 
                        $fh.print("[$time] [INFO] rolling back tx $id\n")
                    } 
                }
                when 4 {
                    $fh.print("[$time] [INFO] frobnicator in effect\n") 
                }
                default { 
                    $fh.print("[$time] [DEBUG] doing some work\n") 
                }
            }
            $time = $time + Duration.new(2000.rand.round / 1000);
        }
        $fh.close();
    }
    if $run {
        say "Running...";
        my %starts;
        my @durations;
        for "testfile".IO.lines {
            if /'starting tx' \s+ (\d+) .* 'timestamp is' \s+ (\S*) $/ {
                my $tstamp = DateTime.new(~$1);
                %starts{$0} = $tstamp;
            }
            elsif /'[' (\S+) ']' .* ( 'comitting' | 'rolling back' ) \s+ 'tx' \s+ (\d+) / {
                my $tstamp = DateTime.new(~$0);
                my $start = %starts{$2};
                if defined $start {
                    my $duration = $tstamp - $start;
                    @durations.push($duration);
                    %starts{$2}:delete;
                }
                else {
                    say "end for unknown tx $2";
                }
            }
        }
        my $pp-pos = round(@durations.elems * 99 / 100);
        @durations = @durations.sort;
        my $pp = @durations[$pp-pos - 1];
        say "99% percentile latency: $pp";
    }
    if $cleanup {
        say "Cleaning up...";
        IO::Path.new("testfile").unlink;
    }
    if !$prep && !$run && !$cleanup {
        say "No arguments given, not doing anything. Try --prep, --run and/or --cleanup";
    }
}
